#!/usr/bin/env ruby
# frozen_string_literal: true

############################################################################################################
## Requires                                                                                               ##
############################################################################################################

require('bundler')

Dir.chdir(File.dirname(__dir__))
Bundler.setup(:default)

require('nokogiri')
require('open-uri')

############################################################################################################
## Config                                                                                                 ##
############################################################################################################

MAX_LINE_LENGTH = 108
CODE_FILE_WITH_MAPS = File.join('lib', 'htx', 'template.rb').freeze

############################################################################################################
## Run                                                                                                    ##
############################################################################################################

code = File.read(CODE_FILE_WITH_MAPS)

[
  ['TAG_MAP', 'Element', 'article.main-page-content > div > ul > li > a > code'],
  ['ATTR_MAP', 'Attribute', 'article.main-page-content > div > ul > li > code > a'],
].each.with_index do |(const, page, css), i|
  const_regex = /(#{const} = %w\[\n)( *)([\w \n]+)(\n *)/.freeze

  unless code =~ const_regex
    abort("Content of #{CODE_FILE_WITH_MAPS.inspect} not as expected: cannot find #{const} definition")
  end

  doc = Nokogiri::HTML(URI.open("https://developer.mozilla.org/en-US/docs/Web/SVG/#{page}"))
  elements = doc.css(css)
                .map { |n| n.text.match(/^\<?([^>]+)\>?$/)[1] }
                .select { |t| t =~ /[A-Z]/ }
                .sort

  code.sub!(const_regex) do
    prefix, indent, suffix = $1, $2, $4
    length = MAX_LINE_LENGTH - indent.size
    items = elements.join(' ').gsub(/([\w ]{,#{length}})( |$)/, "\\1\n#{indent}").rstrip

    "#{prefix}#{indent}#{items}#{suffix}"
  end
end

File.open(CODE_FILE_WITH_MAPS, 'w') { |f| f.write(code) }
