#!/usr/bin/env ruby
# frozen_string_literal: true

Dir.chdir(File.dirname(__dir__))

require('fileutils')
require('json')

if ARGV.size > 0 && ![:major, :minor, :patch].include?(bump = ARGV[0].to_s.strip.to_sym)
  abort('Usage: bin/build [major | minor | patch]')
end

BASE_DIR = Dir.pwd.freeze
RUBY_DIR = File.join(BASE_DIR, 'compilers', 'ruby').freeze
LIB_NAME = File.basename(Dir[File.join(RUBY_DIR, '*.gemspec')].first, '.gemspec').freeze
GEMSPEC_FILES = (Dir[File.join(RUBY_DIR, '*.gemspec')] +
  Dir[File.join(RUBY_DIR, "#{LIB_NAME}-*", '*.gemspec')]).freeze
VERSION_FILES = Dir[File.join("{#{BASE_DIR},#{RUBY_DIR}}", 'VERSION')].freeze
VERSION_FILE_RUBY = File.join(RUBY_DIR, 'lib', LIB_NAME, 'version.rb').freeze
TEST_COMMAND = File.join(RUBY_DIR, 'bin', 'test').freeze

SRC_DIR = File.join(BASE_DIR, 'src').freeze
DIST_DIR = File.join(BASE_DIR, 'dist').freeze
SIZES_FILE = File.join(BASE_DIR, 'sizes.json').freeze
PUBLISH = {
  'Renderer'  => %w[renderer.js  htx-renderer.js  htx-renderer.min.js],
  'Component' => %w[component.js htx-component.js htx-component.min.js],
  'HTX'       => %w[htx.js       htx.js           htx.min.js],
}.freeze

COPYRIGHT = File.readlines(File.join(BASE_DIR, 'LICENSE')).first.strip
OLD_VERSION = File.read(VERSION_FILES.first).strip.freeze
major, minor, patch = OLD_VERSION.split('.').map(&:to_i)
NEW_VERSION =
  case bump || :patch
  when :major then "#{major + 1}.0.0"
  when :minor then "#{major}.#{minor + 1}.0"
  when :patch then "#{major}.#{minor}.#{patch + 1}"
  end

DEPENDENCIES = [
  ['Homebrew',  'which brew || which npm',        '/bin/bash -c "$(curl -fsSL '\
    'https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"'].freeze,
  ['NPM',       'which npm',                      'brew install npm'].freeze,
  ['NPX',       'which npx',                      'npm install -g npx'].freeze,
  ['Terser',    'npx -c "which terser"',          'npm install terser --no-save'].freeze,
  ['Ruby Gems', "cd #{RUBY_DIR} && bundle check", "cd #{RUBY_DIR} && bundle install"].freeze,
].freeze

DEPRECATIONS = {
  'Renderer' => <<~JS,
    globalThis.HTX = Object.assign(function(template, context) {
      console.warn('[DEPRECATED] new HTX(...) is deprecated: directly instantiate template instead [e.g. ' +
        'new templateFcn(context)]')

      return globalThis.HTX.Renderer.templateResolver(template, context)
    }, globalThis.HTX ||= {});

    const HTX = new Proxy(globalThis.HTX, {
      get(target, property, receiver) {
        console.warn('[DEPRECATED] Top-level HTX variable is deprecated: use globalThis.HTX instead')
        return target[property]
      }
    });
  JS

  'Component' => <<~JS,
    const HTXComponent = new Proxy(globalThis.HTX.Component, {
      get(target, property, receiver) {
        if (property == 'prototype') {
          console.warn('[DEPRECATED] Top-level HTXComponent variable is deprecated: use ' +
            'globalThis.HTX.Component instead')
        }

        return target[property]
      }
    });
  JS
}.freeze

############################################################################################################
## Tasks                                                                                                  ##
############################################################################################################

def install_dependencies
  install = DEPENDENCIES.select do |_, check_command, __|
    `#{check_command.gsub(/&&|\|\||$/, '\0>/dev/null 2>&1')}`
    $?.exitstatus != 0
  end

  if install.empty?
    finish_task('Dependencies are installed')
  else
    begin_task('Some dependencies need to be installed')

    print("Install #{install.map(&:first).join(', ')}? (y/n) ")
    finish_task(1) if gets.strip.downcase != 'y'

    install.each do |name, _, install_command|
      task(
        preamble: "Installing #{name}...",
        command: install_command,
        success: "#{name} installed successfully",
        failure: "#{name} installation failed",
      )
    end
  end
end

def test
  task(
    preamble: 'Running tests...',
    command: TEST_COMMAND,
    success: 'Tests passed',
  )
end

def update_version(version = NEW_VERSION, quiet = false)
  begin_task('Updating version number...') unless quiet

  VERSION_FILES.each do |version_file|
    File.write(version_file, "#{version}\n")
  end

  ruby = File.read(VERSION_FILE_RUBY)
  ruby.sub!(/(?<=VERSION = (['"]))(\d+\.\d+\.\d+)(?=\1)/, version)
  File.write(VERSION_FILE_RUBY, ruby)

  finish_task('Version number updated') unless quiet
end

def build_ruby
  multiple = GEMSPEC_FILES.size > 1

  GEMSPEC_FILES.each do |gemspec_file|
    lib_name = File.basename(gemspec_file, '.gemspec')

    task(
      preamble: "Building Ruby gem#{" (#{lib_name})" if multiple}...",
      command: ["cd #{File.dirname(gemspec_file)}", "gem build #{File.basename(gemspec_file)}"],
      success: "Ruby gem built (#{lib_name}-#{NEW_VERSION}.gem)",
    )
  end
end

def build_javascript
  begin_task('Building JavaScript files...')

  sizes = File.exist?(SIZES_FILE) ? JSON.parse(File.read(SIZES_FILE)) : {}
  all = []

  FileUtils.mkdir_p(DIST_DIR)

  PUBLISH.each do |lib_name, (src_file, dist_file, dist_file_min)|
    full_lib_name = lib_name
    src_file = File.join(SRC_DIR, src_file)
    dist_file = File.join(DIST_DIR, dist_file)
    dist_file_min = File.join(DIST_DIR, dist_file_min)

    content = File.read(src_file)

    if lib_name == 'HTX'
      File.write(dist_file, all.join("\n"))
    else
      full_lib_name = "HTX.#{lib_name}"

      content.sub!(/^export ((const|let|function|class) #{lib_name})/, '\\1')
      content.gsub!(/^import .*\n/, '')
      content.gsub!(/^ *\/\*(.*?)\*\/\n/m, '')
      content.gsub!(/^ *\/\/.*\n/, '')
      content.lstrip!
      content.concat("\n#{full_lib_name} = #{lib_name}\n")
      content.gsub!(/^(?!\n)/, '  ')

      content.prepend(javascript_comment(full_lib_name) + "(HTX => {\n")
      content.concat("})(globalThis.HTX ||= {});\n\n")
      content.concat(DEPRECATIONS[lib_name])

      all << content

      File.write(dist_file, content)
    end

    task(command: "npx terser #{dist_file} -c --comments /^$/ --mangle-props regex=/^_.*/ --format "\
      "\"preamble='#{javascript_comment(full_lib_name, :minified)}'\" --output #{dist_file_min} && "\
      "echo '' >> #{dist_file_min}")


    [dist_file, dist_file_min].each do |output_file|
      (sizes[File.basename(output_file)] ||= {})[NEW_VERSION] = [
        `wc -c #{output_file}`.strip.to_i,
        `gzip -c #{output_file} | wc -c`.strip.to_i,
      ]
    end
  end

  finish_task('JavaScript files built')
end

def javascript_comment(lib_name, minified = false)
  if minified
    "/* #{lib_name} v#{NEW_VERSION} :: #{COPYRIGHT} :: MIT License */"
  else
    <<~EOS
      /**
       * #{lib_name}
       * #{COPYRIGHT}
       *
       * @license MIT
       * @version #{NEW_VERSION}
       */
    EOS
  end
end

def write_sizes
  data = File.exist?(SIZES_FILE) ? JSON.parse(File.read(SIZES_FILE)) : {}

  Dir[File.join(DIST_DIR, '*.js')].sort.each do |path|
    (data[File.basename(path)] ||= {})[NEW_VERSION] = [
      `wc -c #{path}`.strip.to_i,
      `gzip -c #{path} | wc -c`.strip.to_i,
    ]
  end

  File.write(SIZES_FILE, "#{JSON.pretty_generate(data).gsub(/\[\s*(\d+),\s*(\d+)\s*\]/, '[\\1, \\2]')}\n")
end

############################################################################################################
## Utils                                                                                                  ##
############################################################################################################

def task(preamble: nil, command:, success: nil, failure: nil)
  begin_task(preamble) if preamble
  system(Array(command).join(' && '))

  if $?.exitstatus != 0
    finish_task($?.exitstatus, failure)
  elsif success
    finish_task(success)
  end
end

def begin_task(str)
  puts("\e[33m\u270e #{str}\e[39m")
end

def finish_task(*args)
  status = args.first.kind_of?(Integer) ? args.shift : 0
  message = args.shift

  if status == 0
    puts("\e[32m\u2714 #{message}\e[39m")
  else
    puts("\e[31m\u2718 #{message || 'Build aborted'}\e[39m")
    exit(status)
  end
end

############################################################################################################

install_dependencies
test
update_version

begin
  build_ruby
  build_javascript
  write_sizes
ensure
  (update_version(OLD_VERSION, :quiet) rescue nil) if $!
end

finish_task("Version #{NEW_VERSION} built successfully!")
