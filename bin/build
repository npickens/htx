#!/usr/bin/env ruby --enable=frozen_string_literal

require('fileutils')
require('open3')

############################################################################################################
## Constants                                                                                              ##
############################################################################################################

BASE_DIR = File.expand_path('../../', __FILE__).freeze
SRC_DIR = File.join(BASE_DIR, 'src').freeze
DIST_DIR = File.join(BASE_DIR, 'dist').freeze

GEMSPEC_FILE = File.join(BASE_DIR, 'compilers/ruby/htx.gemspec').freeze
RUBY_FILE_WITH_VERSION = File.join(BASE_DIR, 'compilers/ruby/lib/htx.rb').freeze

VERSION_FILE = File.join(BASE_DIR, 'VERSION').freeze

############################################################################################################
## Command Line Options                                                                                   ##
############################################################################################################

abort('Usage: bin/build {major|minor|patch}') unless %w[major minor patch].include?(ARGV.join)

major, minor, patch = File.read(VERSION_FILE).strip.split('.').map(&:to_i)

VERSION =
  case ARGV.shift.to_sym
  when :major then "#{major + 1}.0.0"
  when :minor then "#{major}.#{minor + 1}.0"
  when :patch then "#{major}.#{minor}.#{patch + 1}"
  end

############################################################################################################
## Build                                                                                                  ##
############################################################################################################

def build_ruby
  puts_yellow('Building Ruby gem...')

  ruby = File.read(RUBY_FILE_WITH_VERSION)
  ruby.sub!(/VERSION = (['"])(\d+\.\d+\.\d+)\1/, "VERSION = '#{VERSION}'")
  File.open(RUBY_FILE_WITH_VERSION, 'w') { |f| f.write(ruby) }

  if (status = command("gem build #{GEMSPEC_FILE}")) == 0
    puts_green('Ruby gem built')
  else
    puts_red('Build aborted')
    exit(status)
  end
end

def build_javascript
  FileUtils.mkdir_p(DIST_DIR)
  all = []

  Dir.glob(File.join(SRC_DIR, '*.js')).sort_by(&:size).each do |src_file|
    dist_file = src_file.sub(SRC_DIR, DIST_DIR)
    dist_file_min = dist_file.sub(/\.js$/, '.min.js')

    original = File.read(src_file)
    minified, status = command(
      "terser #{src_file} -c --comments /^$/ --mangle-props regex=/^_.*/", capture_output: true
    )

    if status != 0
      puts(minified)
      puts_red('Build aborted')
      exit(status)
    end

    name = original[/^\/\*\*\n \* ([^\n]+)/m, 1]
    comment = comment(name)

    original.gsub!(/^ *\/\*(.*?)\*\/\n/m, '')
    original.gsub!(/^ *\/\/.*\n/, '')

    File.write(dist_file, original.prepend(comment))
    File.write(dist_file_min, minified.prepend(comment))

    all << [name, src_file, original]
  end

  cmd = "terser #{all.map { |f| f[1] }.join(' ')} -c --comments /^$/ --mangle-props regex=/^_.*/"
  minified, status = command(cmd, capture_output: true)

  if status != 0
    puts(minified)
    puts_red('Build aborted')
    exit(status)
  end

  File.write(File.join(DIST_DIR, 'htx-all.js'), all.map(&:last).join("\n"))
  File.write(File.join(DIST_DIR, 'htx-all.min.js'), comment(all.map(&:first).join(', ')) + minified)

  puts_green('JavaScript files built')
end

def comment(name)
  <<~eos
    /**
     * #{name}
     * Copyright 2019 Nate Pickens
     *
     * @license MIT
     * @version #{VERSION}
     */
  eos
end

############################################################################################################
## Test                                                                                                   ##
############################################################################################################

def test
  puts_yellow("Running tests...")

  current_dir = Dir.pwd
  ruby_dir = File.expand_path('../../compilers/ruby', __FILE__)

  if (status = command("cd #{ruby_dir} && bin/test && cd #{current_dir}")) == 0
    puts_green("Tests passed")
  else
    puts_red("Build aborted")
    exit(status)
  end
end

############################################################################################################
## Install                                                                                                ##
############################################################################################################

LIBS = [
  {name: 'Terser', cmd_check: 'which terser', cmd_install: 'npm install -g terser'},
  {name: 'NPM', cmd_check: 'which npm', cmd_install: 'brew install npm'},
  {name: 'Homebrew', cmd_check: 'which brew', cmd_install:
    'ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"'},
].freeze

def install
  needed = LIBS.inject([]) do |needed, lib|
    (`#{lib[:cmd_check]}` && $? == 0) ? (break needed) : needed.push(lib)
  end.reverse

  if needed.empty?
    puts_green('Dependencies are installed')
    return
  end

  print("Install #{needed.map { |l| l[:name] }.join(', ')}? (y/n) ")

  if gets.strip.downcase != 'y'
    puts_red('Build aborted')
    exit(1)
  end

  needed.each do |lib|
    puts_yellow("Installing #{lib[:name]}...")

    if (status = command(lib[:cmd_install])) == 0
      puts_green("#{lib[:name]} installed successfully!")
    else
      puts_red("#{name} installation failed :(")
      exit(status)
    end
  end
end

############################################################################################################
## Utils                                                                                                  ##
############################################################################################################

def puts_red(str)    puts("\e[1;31m\u2718 #{str}\e[0m") end
def puts_yellow(str) puts("\e[1;33m\u270e #{str}\e[0m") end
def puts_green(str)  puts("\e[1;32m\u2714 #{str}\e[0m") end

def command(command, capture_output: false)
  output = ''.dup

  Open3.popen2e(command) do |stdin, stdout_and_stderr, thread|
    while (line = stdout_and_stderr.gets)
      capture_output ? (output << line) : puts("  #{line}")
    end

    capture_output ? [output, thread.value.exitstatus] : thread.value.exitstatus
  end
end

def bump_version
  File.open(VERSION_FILE, 'w') { |f| f.write(VERSION + "\n") }
end

############################################################################################################

install
test
bump_version
build_ruby
build_javascript

puts_green("Version #{VERSION} built successfully!")
