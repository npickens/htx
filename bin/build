#!/usr/bin/env ruby --enable=frozen_string_literal

require('fileutils')
require('open3')

############################################################################################################
## Build                                                                                                  ##
############################################################################################################

BASE_DIR = File.expand_path('../../', __FILE__).freeze
SRC_DIR = File.join(BASE_DIR, 'src').freeze
DIST_DIR = File.join(BASE_DIR, 'dist').freeze
VERSION_FILE = File.join(BASE_DIR, 'VERSION').freeze
RUBY_FILE_WITH_VERSION = File.join(BASE_DIR, 'compilers/ruby/lib/htx.rb').freeze

def build
  if ARGV.size == 1 && %w[--major --minor --patch].include?(ARGV[0])
    version = bump_version(ARGV[0][2..-1].to_sym)
  else
    abort('Please specify --patch, --minor, or --major version bump')
  end

  FileUtils.mkdir_p(DIST_DIR)

  all = []

  Dir.glob(File.join(SRC_DIR, '*.js')).sort_by(&:size).each do |src_file|
    dist_file = src_file.sub(SRC_DIR, DIST_DIR)
    dist_file_min = dist_file.sub(/\.js$/, '.min.js')

    original = File.read(src_file)
    minified = `terser #{src_file} -c --mangle-props regex=/^_.*/`

    name = original[/^\/\*\*\n \* ([^\n]+)/m, 1]
    comment = comment(name, version)

    original.gsub!(/^ *\/\*(.*?)\*\/\n/m, '')
    original.gsub!(/^ *\/\/.*\n/, '')

    File.write(dist_file, original.prepend(comment))
    File.write(dist_file_min, minified.prepend(comment))

    all << [name, src_file, original]
  end

  File.write(File.join(DIST_DIR, 'htx-all.js'), all.map(&:last).join("\n"))
  File.write(File.join(DIST_DIR, 'htx-all.min.js'),
    comment(all.map(&:first).join(', '), version) +
    `terser #{all.map { |f| f[1] }.join(' ')} -c --mangle-props regex=/^_.*/`
  )

  ruby = File.read(RUBY_FILE_WITH_VERSION)
  ruby.sub!(/VERSION = (['"])(\d+\.\d+\.\d+)\1/, "VERSION = '#{version}'")
  File.open(RUBY_FILE_WITH_VERSION, 'w') { |f| f.write(ruby) }

  puts_green("Version #{version} built successfully!")
end

def bump_version(which)
  major, minor, patch = File.read(VERSION_FILE).strip.split('.').map(&:to_i)

  case which
  when :major
    major += 1
    minor = 0
    patch = 0
  when :minor
    minor += 1
    patch = 0
  when :patch
    patch += 1
  end

  version = "#{major}.#{minor}.#{patch}"
  File.open(VERSION_FILE, 'w') { |f| f.write(version + "\n") }

  version
end

def comment(name, version)
  <<~eos
    /**
     * #{name}
     * Copyright 2019 Nate Pickens
     *
     * @license MIT
     * @version #{version}
     */
  eos
end

############################################################################################################
## Test                                                                                                   ##
############################################################################################################

def test
  puts_yellow("Running tests...")

  pwd = Dir.pwd
  dir = File.expand_path('../../compilers/ruby', __FILE__)

  Open3.popen2e("cd #{dir} && bin/test && cd #{pwd}") do |stdin, stdout_and_stderr, thread|
    while (line = stdout_and_stderr.gets)
      puts("  #{line}")
    end

    if thread.value.exitstatus == 0
      puts_green("Tests passed")
    else
      puts_red("Build aborted")
      exit(thread.value.exitstatus)
    end
  end
end

############################################################################################################
## Install                                                                                                ##
############################################################################################################

LIBS = [
  {name: 'Terser', cmd_check: 'which terser', cmd_install: 'npm install -g terser'},
  {name: 'NPM', cmd_check: 'which npm', cmd_install: 'brew install npm'},
  {name: 'Homebrew', cmd_check: 'which brew', cmd_install:
    'ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"'},
].freeze

def install
  needed = LIBS.inject([]) do |needed, lib|
    (`#{lib[:cmd_check]}` && $? == 0) ? (break needed) : needed.push(lib)
  end.reverse

  return if needed.empty?

  print("Install #{needed.map { |l| l[:name] }.join(', ')}? (y/n) ")
  exit(1) if gets.strip.downcase != 'y'

  needed.each do |lib|
    puts_yellow("Installing #{lib[:name]}...")

    Open3.popen2e(lib[:cmd_install]) do |stdin, stdout_and_stderr, thread|
      while (line = stdout_and_stderr.gets)
        puts("  #{line}")
      end

      if thread.value.exitstatus == 0
        puts_green("#{lib[:name]} installed successfully!")
      else
        puts_red("#{name} installation failed :(")
        exit(thread.value.exitstatus)
      end
    end
  end
end

############################################################################################################
## Utils                                                                                                  ##
############################################################################################################

def puts_red(str)    puts("\e[1;31m\u2718 #{str}\e[0m") end
def puts_yellow(str) puts("\e[1;33m\u270e #{str}\e[0m") end
def puts_green(str)  puts("\e[1;32m\u2714 #{str}\e[0m") end

############################################################################################################

install
test
build
